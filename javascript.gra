// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence

parser Start =
  | Program eof:~        # JavascriptProgram
  | ":sexp":~ Sexp1 eof:~ # SexpProgram
  | ":test":~ Tests eof:~ # TestProgram
;

// S-Expressions
ast Sexp =
  | ~ # : (IdentAtom of pos_t * ident_t)
  | ~ # : (StrAtom of pos_t * string)
  | ~ # : (NumAtom of pos_t * float)
  | ~ # : (BoolAtom of pos_t * bool)
  | ~ # : (List of pos_t * sexp_t list)
;

// S-Expressions
parser Sexp1 : sexp_t =
  | Ident1 # { IdentAtom(get_current_pos (), $1) }
  | Value1 # {
    let p = get_current_pos () in
    value_to_sexp_helper p $1 false
  }
  | '(':~ Sexp1* ')':~ # { List(get_current_pos (), $2) }
;

parser Tests :(unit_test_t list) =
  | Test* # { List.flatten $1 }
;

ast UnitTest =
  | ~ # : (ident_t * StringSet.t * ident_t * string option * string option * sexp_t * sexp_t)
;

parser Idents :(ident_t list) =
  | '[':~ IdentList ']':~ # { $2 }
;

parser Test :(unit_test_t list) =
  | Idents Idents? Ident1 String String Sexp2 Sexp2 # {
    let get_opt s = (match s with "" -> None | _ -> Some(s)) in
    let flags = (match $2 with
    | Some(l) -> List.fold_left (fun acc i -> StringSet.add i acc) StringSet.empty l
    | None -> StringSet.empty) in
    List.map (fun x -> (x,flags,$3,get_opt $4,get_opt $5,$6,$7)) $1
  }
;

parser Sexp2 : sexp_t =
  | Sexp1              # { $1 }
  | '(':~ ":program":~ Program ')':~ # { program_to_sexp $3 }
  | '(':~ ":expr":~ Expr1 ')':~ # { expr_to_sexp $3 }
  | '(':~ ":value":~ Expr1 ')':~ # { match $3 with
    | ValExpr(_,v) -> value_to_sexp v
    | UopExpr(p,NegUop,ValExpr(_,NumVal(n))) -> value_to_sexp (NumVal(-. n))
    | _ -> failwith "not a value" (* TODO XXX *)
  }
;

parser Program =
  | Expr1              # ExprProgram
  | Stmt ';':~ Program # StmtProgram
;

parser Stmt =
  | ConstKw:~ Ident1 '=':~ Expr1 # { ConstStmt(get_current_pos (), $2, $4) } : (ConstStmt of pos_t * ident_t * expr_t)
  | LetKw:~ Ident1 '=':~ Expr1   # { LetStmt(get_current_pos (), $2, $4) } : (LetStmt of pos_t * ident_t * expr_t)
  | Expr1 '=':~ Expr1           # AssignStmt
;

ast Typ : typ_t =
  | ~ # : (UnitType)
  | ~ # : (BoolType)
  | ~ # : (NumType)
  | ~ # : (StrType)
  | Typ* # : (TupleType of typ_t list)
  | Typ Typ # : (FuncType of typ_t * typ_t)
;

ast VarAccess =
  | ~ # : (Mutable)
  | ~ # : (Immutable)
;

ast Uop =
  | ~ # : (NotUop)
  | ~ # : (NegUop)
;

ast Bop =
  | ~ # : (AndBop)
  | ~ # : (OrBop)
  | ~ # : (PlusBop)
  | ~ # : (MinusBop)
  | ~ # : (TimesBop)
  | ~ # : (DivBop)
  | ~ # : (EqBop)
  | ~ # : (NeqBop)
  | ~ # : (LtBop)
  | ~ # : (LteBop)
  | ~ # : (GtBop)
  | ~ # : (GteBop)
;

ast Expr =
  | ~ # : (VarExpr of pos_t * ident_t)
  | ~ # : (ValExpr of pos_t * value_t)
  | ~ # : (BlockExpr of pos_t * block_t)
  | ~ # : (FuncExpr of pos_t * lambda_t)
  | ~ # : (UopExpr of pos_t * uop_t * expr_t)
  | ~ # : (BopExpr of pos_t * expr_t * bop_t * expr_t)
  | ~ # : (IfExpr of pos_t * expr_t * expr_t * expr_t)
  | ~ # : (PrintExpr of pos_t * expr_t)
  | ~ # : (CallExpr of pos_t * expr_t * expr_t list)
  | ~ # : (FieldExpr of pos_t * expr_t * ident_t)
  | ~ # : (ObjectExpr of pos_t * field_t list)
;

parser Expr1 : expr_t =
  | Ident1                                    # { VarExpr(get_current_pos (),$1) }
  | UndefKw                                   # { ValExpr(get_current_pos (),UndefVal) }
  | Value1                                    # { ValExpr(get_current_pos (),$1) }
  | '{':~ Block '}':~                         # { BlockExpr(get_current_pos (),$2) }
  | Lambda1                                   # { FuncExpr(get_current_pos (), $1) }
  | '-' Expr1                                 # { UopExpr(get_current_pos (),NegUop,$2) } @prec:=3
  | '!'@assoc:="nonassoc"@prec:=3:~ Expr1     # { UopExpr(get_current_pos (),NotUop,$2) }
  | Expr1 '*'@assoc:="left"@prec:=4:~ Expr1   # { BopExpr(get_current_pos (),$1,TimesBop,$3) }
  | Expr1 '/'@assoc:="left"@prec:=4:~ Expr1   # { BopExpr(get_current_pos (),$1,DivBop,$3) }
  | Expr1 '+'@assoc:="left"@prec:=5:~ Expr1   # { BopExpr(get_current_pos (),$1,PlusBop,$3) }
  | Expr1 '-'@assoc:="left"@prec:=5:~ Expr1   # { BopExpr(get_current_pos (),$1,MinusBop,$3) }
  | Expr1 "<="@assoc:="left"@prec:=7:~ Expr1  # { BopExpr(get_current_pos (),$1,LteBop,$3) }
  | Expr1 '<'@assoc:="left"@prec:=7:~ Expr1   # { BopExpr(get_current_pos (),$1,LtBop,$3) }
  | Expr1 ">="@assoc:="left"@prec:=7:~ Expr1  # { BopExpr(get_current_pos (),$1,GteBop,$3) }
  | Expr1 '>'@assoc:="left"@prec:=7:~ Expr1   # { BopExpr(get_current_pos (),$1,GtBop,$3) }
  | Expr1 "==="@assoc:="left"@prec:=8:~ Expr1 # { BopExpr(get_current_pos (),$1,EqBop,$3) }
  | Expr1 "!=="@assoc:="left"@prec:=8:~ Expr1 # { BopExpr(get_current_pos (),$1,NeqBop,$3) }
  | Expr1 "&&"@assoc:="left"@prec:=9:~ Expr1  # { BopExpr(get_current_pos (),$1,AndBop,$3) }
  | Expr1 "||"@assoc:="left"@prec:=10:~ Expr1 # { BopExpr(get_current_pos (),$1,OrBop,$3) }
  | Expr1 '?'@assoc:="nonassoc"@prec:=11:~
    Expr1 ':'@assoc:="nonassoc"@prec:=12:~
    Expr1                                     # { IfExpr(get_current_pos (),$1,$3,$5) }
  | "console":~ '.':~
    "log":~ '(':~ Expr1 ')':~                 # { PrintExpr(get_current_pos (),$5) }
  | Expr1 '('@assoc:="nonassoc"@prec:=1:~
    ExprList ')':~                            # { CallExpr(get_current_pos (), $1,$3) }
  | Expr1 '.'@assoc:="left"@prec:=2:~ Ident1  # { FieldExpr(get_current_pos (),$1,$3) }
  | '{':~ FieldList '}':~                     # { ObjectExpr(get_current_pos (),$2) }
  | '(':~ Expr1 ')':~                         # { $2 }
;

ast Value =
  | ~ # : (NumVal of float)
  | ~ # : (BoolVal of bool)
  | ~ # : (StrVal of string)
  | ~ # : (UndefVal)
  | ~ # : (ClosureVal of name_map_t * lambda_t)
  | ~ # : (RefVal of address_t)
;

ast Ident =
  | ~ # : string
;

ast Address =
  | ~ # : int
;

ast TypedIdent =
  | ~ # : (ident_t * typ_t option)
;

ast NameMap =
  | ~ # : ((int) StringMap.t)
;

ast Environment =
  | ~ # : (name_map_t list * ident_map_t)
;

ast IdentMap =
  | ~ # : ((var_access_t * value_t) IntMap.t)
;

ast Lambda =
  | ~ # : (ident_t option * typed_ident_t list * block_t * typ_t option)
  // name, params, body, return_type
;

ast Heap =
  | ~ # : (object_t list)
;

ast Object =
  | ~ # : ((value_t) StringMap.t)
;

parser Value1 : value_t =
  | Number     # { NumVal($1) }
  | "NaN"      # { NumVal(Float.nan) }
  | "Infinity" # { NumVal(Float.infinity) }
  | Bool       # { BoolVal($1) }
  | String     # { StrVal($1) }
;

parser Lambda1 : lambda_t =
  | FuncKw:~ Ident1? '(':~ IdentList ')':~ '{':~ Block '}':~ # { ($2, List.map (fun v -> (v,None)) $4, $7, None) }
;

parser Block : block_t =
  | RetKw Expr1      # ReturnBlock
  | Stmt ';':~ Block # StmtBlock
;

parser FieldList :(field_t list) =
  | ~                             # { [] }
  | Field (',':~ Field # { $2 })* # { $1::$2 }
;

parser ExprList :(expr_t list) =
  | ~                             # { [] }
  | Expr1 (',':~ Expr1 # { $2 })* # { $1::$2 }
;

parser IdentList :(ident_t list) =
  | ~                               # { [] }
  | Ident1 (',':~ Ident1 # { $2 })* # { $1::$2 }
;

parser Field : (ident_t * expr_t) =
  | Ident1 ':':~ Expr1 # { ($1, $3) }
;

parser Bool : bool =
  | TrueKw # { true }
  | FalseKw # { false }
;

keyword ConstKw = "const" ;
keyword LetKw   = "let" ;
keyword FuncKw  = "function" ;
keyword RetKw   = "return" ;
keyword UndefKw = "undefined" ;
keyword TrueKw = "true" ;
keyword FalseKw = "false" ;

lexer Ident1 @map:=true @order:=300 =
  | [a-zA-Z_][0-9a-zA-Z_]*
;

lexer Number { js_float_of_string x }:float =
  | (([0-9]+ ('.' [0-9]+)?) | ('.' [0-9]+)) ('e' '-'? [0-9]*)?
  | '0' [bB] [0-1]*
  | '0' [oO] [0-7]*
  | '0' [xX] [0-9a-zA-Z]*
;

lexer String @newline:=true {my_unescaped (fst (strip_quotes x))} =
  | '"' (('\\' ('\\' | '"' | '\'' | [ntbr] | '\n' | [0-9a-fA-F] [0-9a-fA-F])) | [^\\\"])* '"'
;

// throw away comments
lexer SingleLineComment @newline:=true :~ =
  | "//" [^\n]*
;

lexer MultiLineComment @newline:=true :~ =
  | "/*" .. "*/"
;

// throw away whitespace (while remembering the position info)
lexer Blanks @newline:=true @order:=290 :~ =
  | [\r\n\t ]+
;

property utils_pre_code = {
  module StringSet = Set.Make(
  struct
    type t = string
    let compare = compare
  end)

  module IntMap = Map.Make(
  struct
    type t = int
    let compare = compare
  end)

  module StringMap = Map.Make(
  struct
    type t = string
    let compare = compare
  end)

  let my_unescaped s =
    let s = Str.global_replace (Str.regexp "[\\][\r][\n]") "" s in
    let s2 = Str.global_replace (Str.regexp "[\\][\n]") "" s in
    Scanf.unescaped s2

  let strip_quotes (s : string) : (string*bool) =
    let len = String.length s in
    if ((len >= 2) && (String.get s 0)='"' && (String.get s (len-1))='"')
    then (String.sub s 1 (len-2),true) else (s,false)
};

property main_code = {

open Javascript_ast;;

(* extract expression from a single-expression program *)
let get_expr = fun p ->
  match p with
  | ExprProgram(_,e) -> e
  | _ -> raise (NotExpr(p))


let parse_string (s : string) : program_t = 
   match Javascript_parser.start
     Javascript_lexer.token (Lexing.from_string s) with
   | JavascriptProgram(_,p) -> p
   | _ -> failwith "foo"

(* parse input string as an expression *)
let parse_expr (s : string) : expr_t =
  let p = parse_string s in
  get_expr p

(* parse an S-Expression *)
let parse_sexp (s : string) : sexp_t = 
   let s = ":sexp "^s in
   match Javascript_parser.start
     Javascript_lexer.token (Lexing.from_string s) with
   | SexpProgram(_,p) -> p
   | _ -> failwith "foo"

let parse_test (s : string) : unit_test_t list = 
   let s = ":test "^s in
   match Javascript_parser.start
     Javascript_lexer.token (Lexing.from_string s) with
   | TestProgram(_,p) -> p
   | _ -> failwith "foo"

};

property ast_code = {

(* obtain most recent binding of variable x in environment env *)
let read_environment : (environment_t*string) -> (var_access_t*value_t) option = fun (env,x) ->
  let (name_map,val_map) = env in
  try Some(IntMap.find (StringMap.find x (List.hd name_map)) val_map)
  with (Failure(_) | Not_found) -> None

(* overwrite the old value of variable x in environment env *)
let update_environment : (environment_t*string*(var_access_t*value_t)) -> (environment_t*(var_access_t*value_t) option) = fun (env,x,v) ->
  let (name_map,val_map) = env in
  try
    let id = (StringMap.find x (List.hd name_map)) in
    let (access,v_old) = IntMap.find id val_map in
    let new_item = (match access with
    | Mutable -> v
    | Immutable -> (access,v_old)) in
    ((name_map,IntMap.add id new_item val_map), Some(new_item))
  with (Failure(_) | Not_found) -> (env,None)

let unique_id = ref 0

(* push a new binding for variable x into the environment env *)
let push_environment : (environment_t*string*(var_access_t*value_t)) -> environment_t = fun (env,x,v) ->
  let id = !unique_id in
  unique_id := !unique_id + 1;
  let (name_map,val_map) = env in
  let nm2 = (match name_map with
    | a::more -> (StringMap.add x id a)::more
    | _ -> [StringMap.add x id StringMap.empty]
  ) in
  (nm2, IntMap.add id v val_map)

let pop_environment : environment_t -> environment_t = fun env -> match env with
  | ((a::more),d) -> (more,d)
  | _ -> env

(* empty environment - used for testing *)
let empty_env = ([StringMap.empty],IntMap.empty)

(* floating-point equality - used only for testing functionality *)
let eq_float = fun (n1,n2) -> (Float.compare n1 n2)=0

(* convert JavaScript numeric value to float *)
let js_float_of_string = fun s ->
  try float_of_string s
  with Failure(_) -> (
    try Int64.to_float (Int64.of_string s)
    with Failure(_) -> raise (Failure(Printf.sprintf "js_float_of_string: %s" s))
  )

(* convert float to string *)
let str_float = fun n ->
  if (eq_float (n,Float.nan)) then "NaN"
  else if (eq_float (n,Float.infinity)) then "Infinity"
  else if (eq_float (n,Float.neg_infinity)) then "-Infinity"
  else
    let s = Printf.sprintf "%g" n in
    let len1 = (String.length s)-1 in
    if (String.get s len1)='.'
    then String.sub s 0 len1
    else s

let rec str_typ (t : typ_t) = match t with
| UnitType -> "undefined"
| BoolType -> "boolean"
| NumType -> "number"
| StrType -> "string"
| TupleType(tl) -> Printf.sprintf "(%s)" (str_x_list str_typ tl ", ")
| FuncType(t1,t2) -> Printf.sprintf "%s -> %s" (str_typ t1) (str_typ t2)

let str_access = fun a -> match a with
| Mutable   -> "mut"
| Immutable -> "const"

let rec str_program (p : program_t) = match p with
  | ExprProgram(_,e) -> str_expr e
  | StmtProgram(_,s,p) -> Printf.sprintf "%s; %s" (str_stmt s) (str_program p)

and str_stmt (s : stmt_t) = match s with
  | ConstStmt(_,v,e) -> Printf.sprintf "const %s = %s" (str_ident v) (str_expr e)
  | LetStmt(_,v,e) -> Printf.sprintf "let %s = %s" (str_ident v) (str_expr e)
  | AssignStmt(_,e1,e2) -> Printf.sprintf "%s = %s" (str_expr e1) (str_expr e2)

and str_expr (e : expr_t) = match e with
  | VarExpr(_,v) -> Printf.sprintf "%s" (str_ident v)
  | ValExpr(_,v) -> Printf.sprintf "%s" (str_value v)
  | BlockExpr(_,b) -> Printf.sprintf "%s" (str_block b)
  | FuncExpr(_,f) -> Printf.sprintf "%s" (str_lambda f)
  | UopExpr(_,uop,e) -> Printf.sprintf "(%s %s)" (str_uop uop) (str_expr e)
  | BopExpr(_,e1,bop,e2) -> Printf.sprintf "(%s %s %s)" (str_expr e1) (str_bop bop) (str_expr e2)
  | CallExpr(_,(VarExpr(_) as e1),e2) -> Printf.sprintf "%s(%s)" (str_expr e1) (str_x_list str_expr e2 ", ")
  | CallExpr(_,e1,e2) -> Printf.sprintf "(%s)(%s)" (str_expr e1) (str_x_list str_expr e2 ", ")
  | IfExpr(_,e1,e2,e3) -> Printf.sprintf "(%s ? %s : %s)" (str_expr e1) (str_expr e2) (str_expr e3)
  | PrintExpr(_,e) -> Printf.sprintf "console.log(%s)" (str_expr e)
  | FieldExpr(_,e,f) -> Printf.sprintf "%s.%s" (str_expr e) (str_ident f)
  | ObjectExpr(_,fl) -> Printf.sprintf "{ %s }" (str_x_list (fun (f,e) -> Printf.sprintf "%s:%s" (str_ident f) (str_expr e)) fl ", ")

and str_bop (b : bop_t) = match b with
  | AndBop -> "&&"
  | OrBop -> "||"
  | PlusBop -> "+"
  | MinusBop -> "-"
  | TimesBop -> "*"
  | DivBop -> "/"
  | EqBop -> "==="
  | NeqBop -> "!=="
  | LtBop -> "<"
  | LteBop -> "<="
  | GtBop -> ">"
  | GteBop -> ">="

and str_uop (u : uop_t) = match u with
  | NotUop -> "!"
  | NegUop -> "-"

and str_value (v : value_t) = str_value_helper v false

and str_value_helper (v : value_t) (print_special : bool) = match v with
  | NumVal(n) -> str_float n
  | BoolVal(b) -> string_of_bool b
  | StrVal(s) -> Printf.sprintf "\"%s\"" s
  | UndefVal -> "undefined"
  | ClosureVal(nm,f) ->
    if print_special then Printf.sprintf "CL<%s; %s>" (str_name_map nm) (str_lambda f)
    else str_lambda f
  | RefVal(addr) -> Printf.sprintf "REF<%d>" addr

and str_lambda (name,params,bl,_) =
  Printf.sprintf "function %s(%s) { %s }" (str_option (fun x -> x) name) (str_x_list str_typed_var params ", ") (str_block bl)

and str_block (bl : block_t) = match bl with
  | ReturnBlock(_,e) -> Printf.sprintf "return %s" (str_expr e)
  | StmtBlock(_,s,bl) -> Printf.sprintf "%s; %s" (str_stmt s) (str_block bl)

and str_typed_var (tv : typed_ident_t) = match tv with
  | (v,t) -> v

and str_ident (x : ident_t) = x

and str_name_map = fun nm ->
  "{"^(str_x_list (fun (k,i) -> Printf.sprintf "%s->%d" k i) (StringMap.bindings nm) ", ")^"}"

and str_ident_map = fun im ->
  "{"^(str_x_list (fun (k,(m,v)) -> Printf.sprintf "%d->(%s,%s)" k (str_access m) (str_value_helper v true)) (IntMap.bindings im) ", ")^"}"

(* formatting of S-Expressions *)
let rec str_sexp = fun e -> match e with
| IdentAtom(_,s) -> Printf.sprintf "%s" s
| NumAtom(_,n) -> str_float n
| BoolAtom(_,b) -> string_of_bool b
| StrAtom(_,s) -> Printf.sprintf "\"%s\"" s
| List(_,sl) -> Printf.sprintf "(%s)" (str_x_list str_sexp sl " ")

let rec eq_typ (t1 : typ_t) (t2 : typ_t) = match (t1,t2) with
| (UnitType,UnitType) -> true
| (BoolType,BoolType) -> true
| (NumType,NumType) -> true
| (StrType,StrType) -> true
| (TupleType(tl1),TupleType(tl2)) -> eq_list eq_typ tl1 tl2
| (FuncType(ta1,tb1),FuncType(ta2,tb2)) -> (eq_typ ta1 ta2) && (eq_typ tb1 tb2)
| _ -> false

let rec eq_program (p1 : program_t) (p2 : program_t) = match (p1,p2) with
  | (ExprProgram(_,e1),ExprProgram(_,e2)) -> eq_expr e1 e2
  | (StmtProgram(_,s1,p1),StmtProgram(_,s2,p2)) -> (eq_stmt s1 s2) && (eq_program p1 p2)
  | _ -> false

and eq_stmt (s1 : stmt_t) (s2 : stmt_t) = match (s1,s2) with
  | (ConstStmt(_,v1,e1),ConstStmt(_,v2,e2)) -> (eq_ident v1 v2) && (eq_expr e1 e2)
  | (LetStmt(_,v1,e1),LetStmt(_,v2,e2)) -> (eq_ident v1 v2) && (eq_expr e1 e2)
  | (AssignStmt(_,ea1,eb1),AssignStmt(_,ea2,eb2)) -> (eq_expr ea1 ea2) && (eq_expr eb1 eb2)
  | _ -> false

and eq_expr (e1 : expr_t) (e2 : expr_t) = match (e1,e2) with
  | (VarExpr(_,v1),VarExpr(_,v2)) -> eq_ident v1 v2
  | (ValExpr(_,v1),ValExpr(_,v2)) -> eq_value v1 v2
  | (BlockExpr(_,b1),BlockExpr(_,b2)) -> eq_block b1 b2
  | (FuncExpr(_,f1),FuncExpr(_,f2)) -> eq_lambda f1 f2
  | (UopExpr(_,uop1,e1),UopExpr(_,uop2,e2)) -> (eq_uop uop1 uop2) && (eq_expr e1 e2)
  | (BopExpr(_,ea1,bop1,eb1),BopExpr(_,ea2,bop2,eb2)) -> (eq_expr ea1 ea2) && (eq_bop bop1 bop2) && (eq_expr eb2 eb2)
  | (CallExpr(_,ea1,eb1),CallExpr(_,ea2,eb2)) -> (eq_expr ea1 ea2) && (eq_list eq_expr eb1 eb2)
  | (IfExpr(_,ea1,eb1,ec1),IfExpr(_,ea2,eb2,ec2)) -> (eq_expr ea1 ea2) && (eq_expr eb1 eb2) && (eq_expr ec1 ec2)
  | (PrintExpr(_,e1),PrintExpr(_,e2)) -> eq_expr e1 e2
  | (FieldExpr(_,e1,f1),FieldExpr(_,e2,f2)) -> (eq_expr e1 e2) && (eq_ident f1 f2)
  | (ObjectExpr(_,fl1),ObjectExpr(_,fl2)) -> eq_list (fun (i1,e1) (i2,e2) -> (eq_ident i1 i2) && (eq_expr e1 e2)) fl1 fl2
  | _ -> false

and eq_bop (b1 : bop_t) (b2 : bop_t) = match (b1,b2) with
  | (AndBop,AndBop) -> true
  | (OrBop,OrBop) -> true
  | (PlusBop,PlusBop) -> true
  | (MinusBop,MinusBop) -> true
  | (TimesBop,TimesBop) -> true
  | (DivBop,DivBop) -> true
  | (EqBop,EqBop) -> true
  | (NeqBop,NeqBop) -> true
  | (LtBop,LtBop) -> true
  | (LteBop,LteBop) -> true
  | (GtBop,GtBop) -> true
  | (GteBop,GteBop) -> true
  | _ -> false

and eq_uop (u : uop_t) (u : uop_t) = match (u,u) with
  | (NotUop,NotUop) -> true
  | (NegUop,NegUop) -> true
  | _ -> false

and eq_value (v1 : value_t) (v2 : value_t) = match (v1,v2) with
  | (NumVal(n1),NumVal(n2)) -> eq_float (n1,n2)
  | (BoolVal(b1),BoolVal(b2)) -> b1=b2
  | (StrVal(s1),StrVal(s2)) -> s1=s2
  | (UndefVal,UndefVal) -> true
  | (ClosureVal(nm1,l1),ClosureVal(nm2,l2)) ->
    StringMap.equal (=) nm1 nm2 && eq_lambda l1 l2
  | (RefVal(a1),RefVal(a2)) -> a1=a2
  | _ -> false

and eq_lambda (name1,params1,bl1,t1) (name2,params2,bl2,t2) =
  (eq_option eq_ident name1 name2) && (eq_list eq_typed_var params1 params2)
  && (eq_block bl1 bl2) && (eq_option eq_typ t1 t2)

and eq_block (bl1 : block_t) (bl2 : block_t) = match (bl1,bl2) with
  | (ReturnBlock(_,e1),ReturnBlock(_,e2)) -> eq_expr e1 e2
  | (StmtBlock(_,s1,bl1),StmtBlock(_,s2,bl2)) -> (eq_stmt s1 s2) && (eq_block bl1 bl2)
  | _ -> false

and eq_typed_var (tv1 : typed_ident_t) (tv2 : typed_ident_t) = match (tv1,tv2) with
  | ((v1,t1),(v2,t2)) -> (eq_ident v1 v2) && (eq_option eq_typ t1 t2)

and eq_ident (x1 : ident_t) (x2 : ident_t) =
  (x1=x2)

(* equality of S-Expressions *)
let rec eq_sexp (s1 : sexp_t) (s2 : sexp_t) = match (s1,s2) with
  | (IdentAtom(_,s1),IdentAtom(_,s2)) -> s1=s2
  | (NumAtom(_,n1),NumAtom(_,n2)) -> eq_float (n1,n2)
  | (BoolAtom(_,b1),BoolAtom(_,b2)) -> b1=b2
  | (StrAtom(_,s1),StrAtom(_,s2)) -> s1=s2
  | (List(_,sl1),List(_,sl2)) -> eq_list eq_sexp sl1 sl2
  | _ -> false

(* convert value to float *)
let to_num = fun (v : value_t) -> match v with
| NumVal(n) -> n
| BoolVal(true) -> 1.0
| BoolVal(false) -> 0.0
| StrVal(s) -> 
  if (String.trim s)="" then 0.0
  else (try js_float_of_string s with Failure(_) -> Float.nan)
| UndefVal -> Float.nan
| ClosureVal(_,_) -> Float.nan
| RefVal(_) -> Float.nan

(* convert value to bool *)
let to_bool = fun (v : value_t) -> match v with
| NumVal(n) -> if (eq_float (n,0.0) || eq_float (n,Float.nan)) then false else true
| BoolVal(b) -> b
| StrVal("") -> false
| StrVal(_) -> true
| UndefVal -> false
| ClosureVal(_,_) -> true
| RefVal(_) -> true

(* convert value to string *)
let to_str = fun (v : value_t) -> match v with
| NumVal(n) -> str_float n
| BoolVal(b) -> string_of_bool b
| StrVal(s) -> s
| UndefVal -> "undefined"
| ClosureVal(_,_) -> str_value v
| RefVal(_) -> "[object Object]"

let rec str_environment = fun e -> match e with
| (nml,im) ->
  Printf.sprintf "([%s],\n%s)"
  (str_x_list str_name_map nml "; ")
  (str_ident_map im)

and str_environment_simple: environment_t -> string = fun e -> "{"^(match e with
| ((nm::_),im) ->
  let nm2 = StringMap.map (fun v -> try str_value_helper (snd (IntMap.find v im)) true with _ -> "?") nm in
  Printf.sprintf "%s"
  (str_x_list (fun (k,v) -> Printf.sprintf "%s->%s" k v) (StringMap.bindings nm2) ", ")
| _ -> "")^"}"

and str_heap = fun h ->
  "["^(str_x_list str_object h ", ")^"]"

and str_object = fun o ->
  "{"^(str_x_list (fun (k,v) -> Printf.sprintf "%s->%s" k (str_value v)) (StringMap.bindings o) ", ")^"}"

(* exception indicating that a program is more
 * than just a single expression *)
exception NotExpr of program_t
(* exception indicating unimplemented input
 * expression *)
exception ImmutableVar of ident_t
exception UndeclaredVar of ident_t
exception InvalidCall of expr_t
exception UnimplementedExpr of expr_t 
exception UnimplementedStmt of stmt_t 
exception RefError of expr_t 

let eq_exn = fun ex1 ex2 -> match (ex1,ex2) with
| (NotExpr(p1),NotExpr(p2)) -> eq_program p1 p2
| (ImmutableVar(i1),ImmutableVar(i2)) -> i1=i2
| (UndeclaredVar(i1),UndeclaredVar(i2)) -> i1=i2
| (InvalidCall(e1),InvalidCall(e2)) -> eq_expr e1 e2
| (UnimplementedExpr(e1),UnimplementedExpr(e2)) -> eq_expr e1 e2
| (UnimplementedStmt(s1),UnimplementedStmt(s2)) -> eq_stmt s1 s2
| (RefError(e1),RefError(e2)) -> eq_expr e1 e2
| (ex1,ex2) -> ex1=ex2

(* add printer for above exceptions *)
let _ = Printexc.register_printer (fun ex -> match ex with
| NotExpr(p) -> Some(Printf.sprintf "NotExpr(%s)" (str_program p))
| ImmutableVar(i) -> Some(Printf.sprintf "ImmutableVar(%s)" i)
| UndeclaredVar(i) -> Some(Printf.sprintf "UndeclaredVar(%s)" i)
| InvalidCall(e) -> Some(Printf.sprintf "InvalidCall(%s)" (str_expr e))
| UnimplementedExpr(e) -> Some(Printf.sprintf "Unimplemented(%s)" (str_expr e))
| UnimplementedStmt(s) -> Some(Printf.sprintf "Unimplemented(%s)" (str_stmt s))
| RefError(e) -> Some(Printf.sprintf "RefError(%s)" (str_expr e))
| _ -> None)

let rec sexp_to_program (e : sexp_t) : program_t =
(*Printf.printf "sexp_to_program: %s\n" (str_sexp e);*)
match e with
| List(p,[IdentAtom(_,"expr_program");e]) -> ExprProgram(p,sexp_to_expr e)
| List(p,[IdentAtom(_,"stmt_program");s;pr]) -> StmtProgram(p,sexp_to_stmt s,sexp_to_program pr)
| _ -> failwith "sexp_to_program" (* TODO XXX *)

and sexp_to_stmt (e : sexp_t) : stmt_t = match e with
| List(p,[IdentAtom(_,"const_stmt");IdentAtom(_,i);e]) -> ConstStmt(p,i,sexp_to_expr e)
| List(p,[IdentAtom(_,"let_stmt");IdentAtom(_,i);e]) -> LetStmt(p,i,sexp_to_expr e)
| List(p,[IdentAtom(_,"assign_stmt");e1;e2]) -> AssignStmt(p,sexp_to_expr e1,sexp_to_expr e2)
| _ -> failwith "sexp_to_stmt" (* TODO XXX *)

and sexp_to_expr (e : sexp_t) : expr_t = match e with
| List(p,[IdentAtom(_,"val_expr");v]) -> ValExpr(p,sexp_to_value v)
| List(p,[IdentAtom(_,"var_expr");IdentAtom(_,i)]) -> VarExpr(p,i)
| List(p,[IdentAtom(_,"block_expr");b]) -> BlockExpr(p,sexp_to_block b)
| List(p,[IdentAtom(_,"func_expr");f]) -> FuncExpr(p,sexp_to_lambda f)
| List(p,[IdentAtom(_,"uop_expr");uop;e]) -> UopExpr(p,sexp_to_uop uop,sexp_to_expr e)
| List(p,[IdentAtom(_,"bop_expr");e1;bop;e2]) -> BopExpr(p,sexp_to_expr e1,sexp_to_bop bop,sexp_to_expr e2)
| List(p,IdentAtom(_,"call_expr")::e1::el) -> CallExpr(p,sexp_to_expr e1,List.map sexp_to_expr el)
| List(p,[IdentAtom(_,"if_expr");e1;e2;e3]) -> IfExpr(p,sexp_to_expr e1,sexp_to_expr e2,sexp_to_expr e3)
| List(p,[IdentAtom(_,"print_expr");e]) -> PrintExpr(p,sexp_to_expr e)
| List(p,[IdentAtom(_,"field_expr");e;IdentAtom(_,f)]) -> FieldExpr(p,sexp_to_expr e,f)
| List(p,IdentAtom(_,"object_expr")::fl) -> ObjectExpr(p,List.map sexp_to_field fl)
| _ -> failwith (Printf.sprintf "sexp_to_expr: %s" (str_sexp e))

and sexp_to_field (e : sexp_t) : field_t = match e with
| List(p,[IdentAtom(_,i);e]) -> (i, sexp_to_expr e)
| _ -> failwith (Printf.sprintf "sexp_to_expr: %s" (str_sexp e))

and sexp_to_block (e : sexp_t) : block_t = match e with
| List(p,[IdentAtom(_,"return_block");e]) -> ReturnBlock(p,sexp_to_expr e)
| List(p,[IdentAtom(_,"stmt_block");s;b]) -> StmtBlock(p,sexp_to_stmt s,sexp_to_block b)
| _ -> failwith "sexp_to_block" (* TODO XXX *)

and sexp_to_uop (e : sexp_t) : uop_t = match e with
| IdentAtom(_,"neg") -> NegUop
| IdentAtom(_,"not") -> NotUop
| _ -> failwith "sexp_to_uop" (* TODO XXX *)

and sexp_to_bop (e : sexp_t) : bop_t = match e with
| IdentAtom(_,"and") -> AndBop
| IdentAtom(_,"or") -> OrBop
| IdentAtom(_,"plus") -> PlusBop
| IdentAtom(_,"minus") -> MinusBop
| IdentAtom(_,"times") -> TimesBop
| IdentAtom(_,"div") -> DivBop
| IdentAtom(_,"eq") -> EqBop
| IdentAtom(_,"neq") -> NeqBop
| IdentAtom(_,"lt") -> LtBop
| IdentAtom(_,"lte") -> LteBop
| IdentAtom(_,"gt") -> GtBop
| IdentAtom(_,"gte") -> GteBop
| _ -> failwith "sexp_to_bop" (* TODO XXX *)

and sexp_to_value (e : sexp_t) : value_t = match e with
| IdentAtom(_,"undef_val") -> UndefVal
| List(_,[IdentAtom(_,"num_val");NumAtom(p, n)]) -> NumVal(n)
| List(_,[IdentAtom(_,"bool_val");BoolAtom(p, b)]) -> BoolVal(b)
| List(_,[IdentAtom(_,"str_val");StrAtom(p, s)]) -> StrVal(s)
| List(_,[IdentAtom(_,"ref_val");NumAtom(_,addr)]) -> RefVal(int_of_float addr)
| List(_,[IdentAtom(_,"closure_val");l]) -> ClosureVal(StringMap.empty,sexp_to_lambda l)
| _ -> failwith "sexp_to_value" (* TODO XXX *)

and sexp_to_lambda (e : sexp_t) : lambda_t = match e with
| List(ps,name::List(_,params)::[b]) -> (
  (match name with List(_,[n]) -> Some(sexp_to_ident n) | _ -> None),
  List.map (fun s -> (sexp_to_ident s, None)) params,
  sexp_to_block b,
  None
)
| _ -> failwith "sexp_to_lambda" (* TODO XXX *)

and sexp_to_ident (e : sexp_t) : ident_t = match e with
| IdentAtom(_,i) -> i
| _ -> failwith "sexp_to_ident" (* TODO XXX *)

let make_sexp p name l = List(p,[IdentAtom(p,name)]@l)

let rec program_to_sexp (p : program_t) : sexp_t = match p with
| ExprProgram(ps, e) -> make_sexp ps "expr_program" [expr_to_sexp e]
| StmtProgram(ps,s,p) -> make_sexp ps "stmt_program" [stmt_to_sexp s; program_to_sexp p]

and stmt_to_sexp (s : stmt_t) : sexp_t = match s with
| ConstStmt(ps,i,e) -> make_sexp ps "const_stmt" [IdentAtom(ps,i);expr_to_sexp e]
| LetStmt(ps,i,e) -> make_sexp ps "let_stmt" [IdentAtom(ps,i);expr_to_sexp e]
| AssignStmt(ps,e1,e2) -> make_sexp ps "assign_stmt" [expr_to_sexp e1;expr_to_sexp e2]

and block_to_sexp (b : block_t) : sexp_t = match b with
| ReturnBlock(ps, e) -> make_sexp ps "return_block" [expr_to_sexp e]
| StmtBlock(ps,s,b) -> make_sexp ps "stmt_block" [stmt_to_sexp s; block_to_sexp b]

and expr_to_sexp (e : expr_t) : sexp_t = match e with
| VarExpr(ps,i) -> make_sexp ps "var_expr" [IdentAtom(ps,i)]
| ValExpr(ps,v) -> make_sexp ps "val_expr" [value_to_sexp v]
| BlockExpr(ps,b) -> make_sexp ps "block_expr" [block_to_sexp b]
| FuncExpr(ps,f) -> make_sexp ps "func_expr" [lambda_to_sexp ps f]
| UopExpr(ps,uop,e) -> make_sexp ps "uop_expr" [uop_to_sexp uop;expr_to_sexp e]
| BopExpr(ps,e1,bop,e2) -> make_sexp ps "bop_expr" [expr_to_sexp e1;bop_to_sexp bop;expr_to_sexp e2]
| CallExpr(ps,e1,el) -> make_sexp ps "call_expr" ([expr_to_sexp e1]@(List.map expr_to_sexp el))
| IfExpr(ps,e1,e2,e3) -> make_sexp ps "if_expr" [expr_to_sexp e1;expr_to_sexp e2;expr_to_sexp e3]
| PrintExpr(ps,e) -> make_sexp ps "print_expr" [expr_to_sexp e]
| FieldExpr(ps,e,f) -> make_sexp ps "field_expr" [expr_to_sexp e;IdentAtom(ps,f)]
| ObjectExpr(ps,fl) -> make_sexp ps "object_expr" (List.map (fun (k,e) -> List(ps,[IdentAtom(ps,k);expr_to_sexp e])) fl)

and lambda_to_sexp ps (name, tl, b, ty) : sexp_t =
  List(ps, [
    List(ps,match name with Some(i) -> [IdentAtom(ps,i)] | _ -> []);
    List(ps,List.map (fun (i,_) -> IdentAtom(ps,i)) tl);
    block_to_sexp b
  ])

and value_to_sexp (v : value_t) : sexp_t =
  value_to_sexp_helper NoPos v true

and value_to_sexp_helper (p : pos_t) (v : value_t) (wrap : bool) : sexp_t =
let make name x = if wrap then make_sexp p name [x] else x in
match v with
| NumVal(n) -> make "num_val" (NumAtom(p, n))
| BoolVal(b) -> make "bool_val" (BoolAtom(p, b))
| StrVal(s) -> make "str_val" (StrAtom(p, s))
| UndefVal -> IdentAtom(NoPos,"undef_val")
| ClosureVal(_,l) -> make "closure_val" (lambda_to_sexp p l)
| RefVal(addr) -> make "ref_val" (NumAtom(p, float_of_int addr))

and uop_to_sexp (b : uop_t) : sexp_t = match b with
| NegUop -> IdentAtom(NoPos,"neg")
| NotUop -> IdentAtom(NoPos,"not")

and bop_to_sexp (b : bop_t) : sexp_t = match b with
| AndBop -> IdentAtom(NoPos,"and")
| OrBop -> IdentAtom(NoPos,"or")
| PlusBop -> IdentAtom(NoPos,"plus")
| MinusBop -> IdentAtom(NoPos,"minus")
| TimesBop -> IdentAtom(NoPos,"times")
| DivBop -> IdentAtom(NoPos,"div")
| EqBop -> IdentAtom(NoPos,"eq")
| NeqBop -> IdentAtom(NoPos,"neq")
| LtBop -> IdentAtom(NoPos,"lt")
| LteBop -> IdentAtom(NoPos,"lte")
| GtBop -> IdentAtom(NoPos,"gt")
| GteBop -> IdentAtom(NoPos,"gte")

let rec result_to_sexp (f : 'a -> sexp_t) (r : ('a,exn) result) : sexp_t =
match r with
| Ok(x) -> f x
| Error(ex) -> exn_to_sexp ex

and exn_to_sexp (ex : exn) : sexp_t = match ex with
| NotExpr(p) -> List(NoPos,[IdentAtom(NoPos,"not_expr");program_to_sexp p])
| ImmutableVar(i) -> List(NoPos,[IdentAtom(NoPos,"immutable_var"); IdentAtom(NoPos,i)])
| UndeclaredVar(i) -> List(NoPos,[IdentAtom(NoPos,"undeclared_var"); IdentAtom(NoPos,i)])
| InvalidCall(e) -> List(NoPos,[IdentAtom(NoPos,"invalid_call"); expr_to_sexp e])
| UnimplementedExpr(e) -> List(NoPos,[IdentAtom(NoPos,"unimplemented_expr"); expr_to_sexp e])
| UnimplementedStmt(s) -> List(NoPos,[IdentAtom(NoPos,"unimplemented_stmt"); stmt_to_sexp s])
| RefError(e) -> List(NoPos,[IdentAtom(NoPos,"ref_error"); expr_to_sexp e])
(*| _ -> failwith (Printf.sprintf "exn_to_sexp: unknown exn: %s" (Printexc.to_string ex))*)
| _ -> List(NoPos,[IdentAtom(NoPos,"error");StrAtom(NoPos,Printexc.to_string ex)])

};
