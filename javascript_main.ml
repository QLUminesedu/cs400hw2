(*
 * THIS IS AN AUTO-GENERATED FILE PRODUCED BY URUZ!
 * DO NOT EDIT THIS FILE, since any changes will be
 * lost when the build is reset via "make clean".
 * This file is based on a user-specified EBNF
 * grammar, which can be edited as desired.
 *)

open Javascript_parser;;
open Javascript_lexer;;

let get_ast (i : in_channel) = 
   Javascript_parser.start Javascript_lexer.token (Lexing.from_channel i)
;;


open Javascript_ast;;

(* extract expression from a single-expression program *)
let get_expr = fun p ->
  match p with
  | ExprProgram(_,e) -> e
  | _ -> raise (NotExpr(p))


let parse_string (s : string) : program_t = 
   match Javascript_parser.start
     Javascript_lexer.token (Lexing.from_string s) with
   | JavascriptProgram(_,p) -> p
   | _ -> failwith "foo"

(* parse input string as an expression *)
let parse_expr (s : string) : expr_t =
  let p = parse_string s in
  get_expr p

(* parse an S-Expression *)
let parse_sexp (s : string) : sexp_t = 
   let s = ":sexp "^s in
   match Javascript_parser.start
     Javascript_lexer.token (Lexing.from_string s) with
   | SexpProgram(_,p) -> p
   | _ -> failwith "foo"

let parse_test (s : string) : unit_test_t list = 
   let s = ":test "^s in
   match Javascript_parser.start
     Javascript_lexer.token (Lexing.from_string s) with
   | TestProgram(_,p) -> p
   | _ -> failwith "foo"

